#!/bin/bash

d=contents              # destination directory
b=0                     # set to 1 if enterDirectory changed the directory until it goes back
javadocdir=./javadoc    # directory where javadoc output should be redirected to

# Stops the script with an error message.
function die {
    echo >&2 "$@"
    exit 1
}

# Processes all subfolders in the current directory.
function process {
    for f in *
    do
        cd $f;
        for g in *
        do
            cd $g
            extract
            processThis
            cd ..
        done
        cd ..;
    done
}

# Processes project in the current directory.
function processThis {
    enterDirectory
    doCheckstyle
    doJavadoc
    #doJUnit # included in Cobertura
    doCobertura
    test $b -eq 0 || exitDirectory
}

# Extracts all zip files in current directory.
function extract {
    for z in *.zip
    do
        unzip -q -n "$z"
        rm "$z"
        rm -rf __MACOSX # remove to detect whether the project is contained in a folder later
    done
}

# Changes to a directory if its the only one in the current directory.
function enterDirectory {
    n=$(ls -l | wc -l) # number of files + 1
    test $n -gt 2 || cdDir # change directory if there is only 1 file
}

# Moves up one dir level (and sets b to 0).
function exitDirectory {
    cd ..
    b=0
}

# Enters a random (intended to be the only) directory (and sets b to 1).
function cdDir {
    for f in *
    do
        cd "$f"
    done
    b=1
}

# Generates checkstyle report for project in current directory.
function doCheckstyle {
    #TODO: replace by modified version, use prettier output format
    checkstyle -c "$libdir/../checkstyle-2ip15.xml" -o checkstyle.txt -r src/
}

# Generates Javadoc report for project in current directory.
function doJavadoc {
    # alternative: packages=$(ls src) #has trouble with extra files, subpackages
    files=$(find ./src -type f -name "*.java")
    javadoc -d $javadocdir -quiet -private -notree -noindex -nohelp -nonavbar -author -version -sourcepath src/ -docletpath "$libdir/PrePostDoclet.jar" -doclet nl.tue.doclets.PrePostDoclet $files 2> javadoc.log
    #TODO: check if log contains all output
}

# Runs JUnit test cases and generates report in current directory.
function doJUnit {
    #TODO: replace by something better, more complete that works with cobertura
    ant test 2> junit.log
}

# Generates Cobertura report for project in current directory.
function doCobertura {
    ant compile # N.B. needs ant and build.xml
    cobertura-instrument build
    doJUnit
    cobertura-report --destination cobertura --source src/
}

# entry point function
function main {
    [ "$#" -eq 1 ] || die "syntax: script [archive]" # check number of arguments
    [ -f $1 ] || die "$1 does not exist" # check existence of file $1
    cd lib
    libdir=$(pwd)
    cd ..
    mkdir $d
    unzip -q -n "$1" -d $d
    cd $d
    process
}

# entry point
#main $1
doJUnit
